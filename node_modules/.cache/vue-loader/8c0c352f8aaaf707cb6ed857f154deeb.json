{"remainingRequest":"/Users/zatilimaniahwan/kana-new/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zatilimaniahwan/kana-new/src/components/FeatureSection/featureFour.vue?vue&type=template&id=77e29328&","dependencies":[{"path":"/Users/zatilimaniahwan/kana-new/src/components/FeatureSection/featureFour.vue","mtime":1615900735083},{"path":"/Users/zatilimaniahwan/kana-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zatilimaniahwan/kana-new/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/zatilimaniahwan/kana-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zatilimaniahwan/kana-new/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxzZWN0aW9uCiAgaWQ9ImZlYXR1cmVzIgogIGNsYXNzPSJzZWN0aW9uIGZlYXR1cmVzLWFyZWEgb3ZlcmZsb3ctaGlkZGVuIG10LTUgcHRiXzEwMCIKPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtMTAgY29sLWxnLTYiPgogICAgICAgIDwhLS0gU2VjdGlvbiBIZWFkaW5nIC0tPgogICAgICAgIDxkaXYgY2xhc3M9InNlY3Rpb24taGVhZGluZyB0ZXh0LWNlbnRlciI+CiAgICAgICAgICA8aDI+V2h5IFNtYWxsIEJ1c2luZXNzIE93bmVyJ3MgTG92ZXMgc0FwcDwvaDI+CiAgICAgICAgICA8cCBjbGFzcz0iZC1ub25lIGQtc20tYmxvY2sgbXQtNCI+CiAgICAgICAgICAgIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBMYWJvcnVtIG9iY2FlY2F0aSBkaWduaXNzaW1vcyBxdWFlIHF1byBhZCBpc3RlIGlwc3VtIG9mZmljaWlzIGRlbGVuaXRpIGFzcGVyaW9yZXMgc2l0LgogICAgICAgICAgPC9wPgogICAgICAgICAgPHAgY2xhc3M9ImQtYmxvY2sgZC1zbS1ub25lIG10LTQiPgogICAgICAgICAgICBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gTGFib3J1bSBvYmNhZWNhdGkuCiAgICAgICAgICA8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTYiPgogICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmVzLXNsaWRlci13cmFwcGVyIG92ZXJmbG93LWhpZGRlbiI+CiAgICAgICAgICA8IS0tIFdvcmsgU2xpZGVyIC0tPgogICAgICAgICAgPHVsIGNsYXNzPSJmZWF0dXJlcy1zbGlkZXIgb3dsLWNhcm91c2VsIj4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzbGlkZS1pdGVtIj4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9ImFzc2V0cy9pbWcvc2NyZWVuc2hvdF8xLmpwZyIKICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzbGlkZS1pdGVtIj4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9ImFzc2V0cy9pbWcvc2NyZWVuc2hvdF8yLmpwZyIKICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzbGlkZS1pdGVtIj4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9ImFzc2V0cy9pbWcvc2NyZWVuc2hvdF8zLmpwZyIKICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzbGlkZS1pdGVtIj4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBzcmM9ImFzc2V0cy9pbWcvc2NyZWVuc2hvdF80LmpwZyIKICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTYgcHQtNCBwdC1tZC0wIj4KICAgICAgICA8dWwgY2xhc3M9ImZlYXR1cmVzLWl0ZW0iPgogICAgICAgICAgPGxpPgogICAgICAgICAgICA8IS0tIEltYWdlIEJveCAtLT4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJpbWFnZS1ib3ggbWVkaWEgaWNvbi0xIHB4LTEgcHktMyBweS1tZC00IHdvdyBmYWRlSW5SaWdodCIKICAgICAgICAgICAgICBkYXRhLWFvcy1kdXJhdGlvbj0iMnMiCiAgICAgICAgICAgICAgZGF0YS13b3ctZGVsYXk9IjAuMnMiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8IS0tIEZlYXR1cmVkIEltYWdlIC0tPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmVkLWltZyBtci0zIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgY2xhc3M9ImF2YXRhci1zbSIKICAgICAgICAgICAgICAgICAgc3JjPSJhc3NldHMvaW1nL2ZlYXR1cmVkX2ltYWdlXzEucG5nIgogICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8IS0tIEljb24gVGV4dCAtLT4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXRleHQgbWVkaWEtYm9keSBhbGlnbi1zZWxmLWNlbnRlciBhbGlnbi1zZWxmLW1kLXN0YXJ0Ij4KICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWItMiI+CiAgICAgICAgICAgICAgICAgIEZ1bGx5IGZ1bmN0aW9uYWwKICAgICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgICA8cD5Mb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gVmVyaXRhdGlzIGN1bHBhIGV4cGVkaXRhIGRpZ25pc3NpbW9zLjwvcD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpPgogICAgICAgICAgICA8IS0tIEltYWdlIEJveCAtLT4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJpbWFnZS1ib3ggbWVkaWEgaWNvbi0yIHB4LTEgcHktMyBweS1tZC00IHdvdyBmYWRlSW5SaWdodCIKICAgICAgICAgICAgICBkYXRhLWFvcy1kdXJhdGlvbj0iMnMiCiAgICAgICAgICAgICAgZGF0YS13b3ctZGVsYXk9IjAuNHMiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8IS0tIEZlYXR1cmVkIEltYWdlIC0tPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmVkLWltZyBtci0zIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgY2xhc3M9ImF2YXRhci1zbSIKICAgICAgICAgICAgICAgICAgc3JjPSJhc3NldHMvaW1nL2ZlYXR1cmVkX2ltYWdlXzIucG5nIgogICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8IS0tIEljb24gVGV4dCAtLT4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXRleHQgbWVkaWEtYm9keSBhbGlnbi1zZWxmLWNlbnRlciBhbGlnbi1zZWxmLW1kLXN0YXJ0Ij4KICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWItMiI+CiAgICAgICAgICAgICAgICAgIExpdmUgQ2hhdAogICAgICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgICAgIDxwPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBWZXJpdGF0aXMgY3VscGEgZXhwZWRpdGEgZGlnbmlzc2ltb3MuPC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDwhLS0gSW1hZ2UgQm94IC0tPgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgY2xhc3M9ImltYWdlLWJveCBtZWRpYSBpY29uLTMgcHgtMSBweS0zIHB5LW1kLTQgd293IGZhZGVJblJpZ2h0IgogICAgICAgICAgICAgIGRhdGEtYW9zLWR1cmF0aW9uPSIycyIKICAgICAgICAgICAgICBkYXRhLXdvdy1kZWxheT0iMC42cyIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwhLS0gRmVhdHVyZWQgSW1hZ2UgLS0+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZWQtaW1nIG1yLTMiPgogICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICBjbGFzcz0iYXZhdGFyLXNtIgogICAgICAgICAgICAgICAgICBzcmM9ImFzc2V0cy9pbWcvZmVhdHVyZWRfaW1hZ2VfMy5wbmciCiAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwhLS0gSWNvbiBUZXh0IC0tPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24tdGV4dCBtZWRpYS1ib2R5IGFsaWduLXNlbGYtY2VudGVyIGFsaWduLXNlbGYtbWQtc3RhcnQiPgogICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtYi0yIj4KICAgICAgICAgICAgICAgICAgU2VjdXJlIERhdGEKICAgICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgICA8cD5Mb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gVmVyaXRhdGlzIGN1bHBhIGV4cGVkaXRhIGRpZ25pc3NpbW9zLjwvcD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpPgogICAgICAgICAgICA8IS0tIEltYWdlIEJveCAtLT4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJpbWFnZS1ib3ggbWVkaWEgaWNvbi00IHB4LTEgcHktMyBweS1tZC00IHdvdyBmYWRlSW5SaWdodCIKICAgICAgICAgICAgICBkYXRhLWFvcy1kdXJhdGlvbj0iMnMiCiAgICAgICAgICAgICAgZGF0YS13b3ctZGVsYXk9IjAuOHMiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8IS0tIEZlYXR1cmVkIEltYWdlIC0tPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmVkLWltZyBtci0zIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgY2xhc3M9ImF2YXRhci1zbSIKICAgICAgICAgICAgICAgICAgc3JjPSJhc3NldHMvaW1nL2ZlYXR1cmVkX2ltYWdlXzQucG5nIgogICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8IS0tIEljb24gVGV4dCAtLT4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXRleHQgbWVkaWEtYm9keSBhbGlnbi1zZWxmLWNlbnRlciBhbGlnbi1zZWxmLW1kLXN0YXJ0Ij4KICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWItMiI+CiAgICAgICAgICAgICAgICAgIEVhc3kgdG8gQ3VzdG9taXplCiAgICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgICAgPHA+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIFZlcml0YXRpcyBjdWxwYSBleHBlZGl0YSBkaWduaXNzaW1vcy48L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9saT4KICAgICAgICA8L3VsPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L3NlY3Rpb24+Cg=="},null]}