{"remainingRequest":"/Users/zatilimaniahwan/kana-new/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zatilimaniahwan/kana-new/src/components/PricingSection/pricingFour.vue?vue&type=template&id=943f0728&","dependencies":[{"path":"/Users/zatilimaniahwan/kana-new/src/components/PricingSection/pricingFour.vue","mtime":1615909333150},{"path":"/Users/zatilimaniahwan/kana-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zatilimaniahwan/kana-new/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/zatilimaniahwan/kana-new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zatilimaniahwan/kana-new/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}